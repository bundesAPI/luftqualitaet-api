"""
    Umweltbundesamt Air Data API

    Air data API of Umweltbundesamt  # noqa: E501

    The version of the OpenAPI document: 2.0.1
    Contact: immission@uba.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from deutschland.luftqualitaet.api_client import ApiClient
from deutschland.luftqualitaet.api_client import Endpoint as _Endpoint
from deutschland.luftqualitaet.model.inline_response2004 import InlineResponse2004
from deutschland.luftqualitaet.model.measure import Measure
from deutschland.luftqualitaet.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class MeasurementsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.measures_json_get_endpoint = _Endpoint(
            settings={
                "response_type": ([Measure],),
                "auth": [],
                "endpoint_path": "/measures/json",
                "operation_id": "measures_json_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "date_from",
                    "time_from",
                    "date_to",
                    "time_to",
                    "station",
                    "component",
                    "scope",
                ],
                "required": [
                    "date_from",
                    "time_from",
                    "date_to",
                    "time_to",
                ],
                "nullable": [],
                "enum": [],
                "validation": [
                    "time_from",
                    "time_to",
                ],
            },
            root_map={
                "validations": {
                    ("time_from",): {
                        "inclusive_maximum": 24,
                        "inclusive_minimum": 1,
                    },
                    ("time_to",): {
                        "inclusive_maximum": 24,
                        "inclusive_minimum": 1,
                    },
                },
                "allowed_values": {},
                "openapi_types": {
                    "date_from": (str,),
                    "time_from": (int,),
                    "date_to": (str,),
                    "time_to": (int,),
                    "station": (int,),
                    "component": (int,),
                    "scope": (int,),
                },
                "attribute_map": {
                    "date_from": "date_from",
                    "time_from": "time_from",
                    "date_to": "date_to",
                    "time_to": "time_to",
                    "station": "station",
                    "component": "component",
                    "scope": "scope",
                },
                "location_map": {
                    "date_from": "query",
                    "time_from": "query",
                    "date_to": "query",
                    "time_to": "query",
                    "station": "query",
                    "component": "query",
                    "scope": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.measures_limits_get_endpoint = _Endpoint(
            settings={
                "response_type": (InlineResponse2004,),
                "auth": [],
                "endpoint_path": "/measures/limits",
                "operation_id": "measures_limits_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [],
                "required": [],
                "nullable": [],
                "enum": [],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {},
                "openapi_types": {},
                "attribute_map": {},
                "location_map": {},
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def measures_json_get(self, date_from, time_from, date_to, time_to, **kwargs):
        """Get all measurements  # noqa: E501

        This entry point returns measures for the provided parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.measures_json_get(date_from, time_from, date_to, time_to, async_req=True)
        >>> result = thread.get()

        Args:
            date_from (str): A date
            time_from (int): An hour.
            date_to (str): A date
            time_to (int): An hour.

        Keyword Args:
            station (int): Id of station. [optional]
            component (int): Id of component. [optional]
            scope (int): Id of scope. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Measure]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["date_from"] = date_from
        kwargs["time_from"] = time_from
        kwargs["date_to"] = date_to
        kwargs["time_to"] = time_to
        return self.measures_json_get_endpoint.call_with_http_info(**kwargs)

    def measures_limits_get(self, **kwargs):
        """Get measurement date limits  # noqa: E501

        This entry point returns all limits of measurements  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.measures_limits_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2004
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        return self.measures_limits_get_endpoint.call_with_http_info(**kwargs)
