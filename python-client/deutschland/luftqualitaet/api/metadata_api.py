"""
    Umweltbundesamt Air Data API

    Air data API of Umweltbundesamt  # noqa: E501

    The version of the OpenAPI document: 2.0.1
    Contact: immission@uba.de
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from deutschland.luftqualitaet.api_client import ApiClient
from deutschland.luftqualitaet.api_client import Endpoint as _Endpoint
from deutschland.luftqualitaet.model.inline_response2003 import InlineResponse2003
from deutschland.luftqualitaet.model.inline_response2005 import InlineResponse2005
from deutschland.luftqualitaet.model.inline_response2006 import InlineResponse2006
from deutschland.luftqualitaet.model.network import Network
from deutschland.luftqualitaet.model.stationsetting import Stationsetting
from deutschland.luftqualitaet.model.stationtype import Stationtype
from deutschland.luftqualitaet.model.threshold import Threshold
from deutschland.luftqualitaet.model.transgressiontype import Transgressiontype
from deutschland.luftqualitaet.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types,
)


class MetadataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.components_json_get_endpoint = _Endpoint(
            settings={
                "response_type": (InlineResponse2003,),
                "auth": [],
                "endpoint_path": "/components/json",
                "operation_id": "components_json_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "lang",
                    "index",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "lang",
                    "index",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("lang",): {"EN": "en", "DE": "de"},
                    ("index",): {"ID": "id", "CODE": "code"},
                },
                "openapi_types": {
                    "lang": (str,),
                    "index": (str,),
                },
                "attribute_map": {
                    "lang": "lang",
                    "index": "index",
                },
                "location_map": {
                    "lang": "query",
                    "index": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.meta_json_get_endpoint = _Endpoint(
            settings={
                "response_type": (InlineResponse2006,),
                "auth": [],
                "endpoint_path": "/meta/json",
                "operation_id": "meta_json_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "use",
                    "lang",
                    "date_from",
                    "date_to",
                    "time_from",
                    "time_to",
                ],
                "required": [
                    "use",
                ],
                "nullable": [],
                "enum": [
                    "use",
                    "lang",
                ],
                "validation": [
                    "time_from",
                    "time_to",
                ],
            },
            root_map={
                "validations": {
                    ("time_from",): {
                        "inclusive_maximum": 24,
                        "inclusive_minimum": 1,
                    },
                    ("time_to",): {
                        "inclusive_maximum": 24,
                        "inclusive_minimum": 1,
                    },
                },
                "allowed_values": {
                    ("use",): {
                        "AIRQUALITY": "airquality",
                        "MEASURE": "measure",
                        "TRANSGRESSION": "transgression",
                        "ANNUALBALANCE": "annualbalance",
                        "MAP": "map",
                    },
                    ("lang",): {"EN": "en", "DE": "de"},
                },
                "openapi_types": {
                    "use": (str,),
                    "lang": (str,),
                    "date_from": (str,),
                    "date_to": (str,),
                    "time_from": (int,),
                    "time_to": (int,),
                },
                "attribute_map": {
                    "use": "use",
                    "lang": "lang",
                    "date_from": "date_from",
                    "date_to": "date_to",
                    "time_from": "time_from",
                    "time_to": "time_to",
                },
                "location_map": {
                    "use": "query",
                    "lang": "query",
                    "date_from": "query",
                    "date_to": "query",
                    "time_from": "query",
                    "time_to": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.networks_json_get_endpoint = _Endpoint(
            settings={
                "response_type": ([Network],),
                "auth": [],
                "endpoint_path": "/networks/json",
                "operation_id": "networks_json_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "lang",
                    "index",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "lang",
                    "index",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("lang",): {"EN": "en", "DE": "de"},
                    ("index",): {"ID": "id", "CODE": "code"},
                },
                "openapi_types": {
                    "lang": (str,),
                    "index": (str,),
                },
                "attribute_map": {
                    "lang": "lang",
                    "index": "index",
                },
                "location_map": {
                    "lang": "query",
                    "index": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.scopes_json_get_endpoint = _Endpoint(
            settings={
                "response_type": (InlineResponse2005,),
                "auth": [],
                "endpoint_path": "/scopes/json",
                "operation_id": "scopes_json_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "lang",
                    "index",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "lang",
                    "index",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("lang",): {"EN": "en", "DE": "de"},
                    ("index",): {"ID": "id", "CODE": "code"},
                },
                "openapi_types": {
                    "lang": (str,),
                    "index": (str,),
                },
                "attribute_map": {
                    "lang": "lang",
                    "index": "index",
                },
                "location_map": {
                    "lang": "query",
                    "index": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.stationsettings_json_get_endpoint = _Endpoint(
            settings={
                "response_type": ([Stationsetting],),
                "auth": [],
                "endpoint_path": "/stationsettings/json",
                "operation_id": "stationsettings_json_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "lang",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "lang",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("lang",): {"EN": "en", "DE": "de"},
                },
                "openapi_types": {
                    "lang": (str,),
                },
                "attribute_map": {
                    "lang": "lang",
                },
                "location_map": {
                    "lang": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.stationtypes_json_get_endpoint = _Endpoint(
            settings={
                "response_type": ([Stationtype],),
                "auth": [],
                "endpoint_path": "/stationtypes/json",
                "operation_id": "stationtypes_json_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "lang",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "lang",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("lang",): {"EN": "en", "DE": "de"},
                },
                "openapi_types": {
                    "lang": (str,),
                },
                "attribute_map": {
                    "lang": "lang",
                },
                "location_map": {
                    "lang": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.thresholds_json_get_endpoint = _Endpoint(
            settings={
                "response_type": ([Threshold],),
                "auth": [],
                "endpoint_path": "/thresholds/json",
                "operation_id": "thresholds_json_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "use",
                    "lang",
                    "component",
                    "scope",
                ],
                "required": [
                    "use",
                ],
                "nullable": [],
                "enum": [
                    "use",
                    "lang",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("use",): {"AIRQUALITY": "airquality", "MEASURE": "measure"},
                    ("lang",): {"EN": "en", "DE": "de"},
                },
                "openapi_types": {
                    "use": (str,),
                    "lang": (str,),
                    "component": (int,),
                    "scope": (int,),
                },
                "attribute_map": {
                    "use": "use",
                    "lang": "lang",
                    "component": "component",
                    "scope": "scope",
                },
                "location_map": {
                    "use": "query",
                    "lang": "query",
                    "component": "query",
                    "scope": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )
        self.transgressiontypes_json_get_endpoint = _Endpoint(
            settings={
                "response_type": ([Transgressiontype],),
                "auth": [],
                "endpoint_path": "/transgressiontypes/json",
                "operation_id": "transgressiontypes_json_get",
                "http_method": "GET",
                "servers": None,
            },
            params_map={
                "all": [
                    "lang",
                ],
                "required": [],
                "nullable": [],
                "enum": [
                    "lang",
                ],
                "validation": [],
            },
            root_map={
                "validations": {},
                "allowed_values": {
                    ("lang",): {"EN": "en", "DE": "de"},
                },
                "openapi_types": {
                    "lang": (str,),
                },
                "attribute_map": {
                    "lang": "lang",
                },
                "location_map": {
                    "lang": "query",
                },
                "collection_format_map": {},
            },
            headers_map={
                "accept": ["application/json"],
                "content_type": [],
            },
            api_client=api_client,
        )

    def components_json_get(self, **kwargs):
        """Get all components  # noqa: E501

        This entry point returns a list of all components.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.components_json_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            lang (str): The language code. [optional] if omitted the server will use the default value of "en"
            index (str): The type of index to be used. [optional] if omitted the server will use the default value of "id"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2003
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        return self.components_json_get_endpoint.call_with_http_info(**kwargs)

    def meta_json_get(self, use, **kwargs):
        """Get combined metadata for use  # noqa: E501

        The use parameter defines what meta data should be returned. E.g. if you set use to airquality, meta data of airquality is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.meta_json_get(use, async_req=True)
        >>> result = thread.get()

        Args:
            use (str): Defines the use.

        Keyword Args:
            lang (str): The language code. [optional] if omitted the server will use the default value of "en"
            date_from (str): A date (required only for use = airquality). [optional]
            date_to (str): A date (required only for use = airquality). [optional]
            time_from (int): An hour.. [optional]
            time_to (int): An hour.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2006
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["use"] = use
        return self.meta_json_get_endpoint.call_with_http_info(**kwargs)

    def networks_json_get(self, **kwargs):
        """Get all networks  # noqa: E501

        This entry point returns a list of all networks.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.networks_json_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            lang (str): The language code. [optional] if omitted the server will use the default value of "en"
            index (str): The type of index to be used. [optional] if omitted the server will use the default value of "id"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Network]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        return self.networks_json_get_endpoint.call_with_http_info(**kwargs)

    def scopes_json_get(self, **kwargs):
        """Get all scopes  # noqa: E501

        The entry point returns a list of all scopes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.scopes_json_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            lang (str): The language code. [optional] if omitted the server will use the default value of "en"
            index (str): The type of index to be used. [optional] if omitted the server will use the default value of "id"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2005
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        return self.scopes_json_get_endpoint.call_with_http_info(**kwargs)

    def stationsettings_json_get(self, **kwargs):
        """Get all station settings  # noqa: E501

        This entry point returns a list of all station settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stationsettings_json_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            lang (str): The language code. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Stationsetting]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        return self.stationsettings_json_get_endpoint.call_with_http_info(**kwargs)

    def stationtypes_json_get(self, **kwargs):
        """Get all station types  # noqa: E501

        This entry point returns a list of all station types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.stationtypes_json_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            lang (str): The language code. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Stationtype]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        return self.stationtypes_json_get_endpoint.call_with_http_info(**kwargs)

    def thresholds_json_get(self, use, **kwargs):
        """Get all thresholds  # noqa: E501

        This entry point returns a list of all thresholds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.thresholds_json_get(use, async_req=True)
        >>> result = thread.get()

        Args:
            use (str): Defines which thresholds to use.

        Keyword Args:
            lang (str): The language code. [optional] if omitted the server will use the default value of "en"
            component (int): Id of component. [optional]
            scope (int): Id of scope. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Threshold]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        kwargs["use"] = use
        return self.thresholds_json_get_endpoint.call_with_http_info(**kwargs)

    def transgressiontypes_json_get(self, **kwargs):
        """Get all exceedances types  # noqa: E501

        Returns all exceedances types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.transgressiontypes_json_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            lang (str): The language code. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [Transgressiontype]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs["async_req"] = kwargs.get("async_req", False)
        kwargs["_return_http_data_only"] = kwargs.get("_return_http_data_only", True)
        kwargs["_preload_content"] = kwargs.get("_preload_content", True)
        kwargs["_request_timeout"] = kwargs.get("_request_timeout", None)
        kwargs["_check_input_type"] = kwargs.get("_check_input_type", True)
        kwargs["_check_return_type"] = kwargs.get("_check_return_type", True)
        kwargs["_spec_property_naming"] = kwargs.get("_spec_property_naming", False)
        kwargs["_content_type"] = kwargs.get("_content_type")
        kwargs["_host_index"] = kwargs.get("_host_index")
        return self.transgressiontypes_json_get_endpoint.call_with_http_info(**kwargs)
